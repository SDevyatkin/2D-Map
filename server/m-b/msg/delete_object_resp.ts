// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 *Ответ
 */
export class delete_object_resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):delete_object_resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsdelete_object_resp(bb:flatbuffers.ByteBuffer, obj?:delete_object_resp):delete_object_resp {
  return (obj || new delete_object_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsdelete_object_resp(bb:flatbuffers.ByteBuffer, obj?:delete_object_resp):delete_object_resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new delete_object_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *статус, true если нет ошибок
 */
status():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

/**
 *Некорректный запрос
 */
incorrectRequest():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Внутрення ошибка ПМ Брокер сообщений, дальнейшая работа невозможна
 */
internalError():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Экземпляр структуры не существует
 */
objectNotExists():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Неизвестная структукра (значит не поступал запрос о публикации структукры)
 */
unknowStruct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startdelete_object_resp(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addStatus(builder:flatbuffers.Builder, status:boolean) {
  builder.addFieldInt8(0, +status, +true);
}

static addIncorrectRequest(builder:flatbuffers.Builder, incorrectRequest:boolean) {
  builder.addFieldInt8(1, +incorrectRequest, +false);
}

static addInternalError(builder:flatbuffers.Builder, internalError:boolean) {
  builder.addFieldInt8(2, +internalError, +false);
}

static addObjectNotExists(builder:flatbuffers.Builder, objectNotExists:boolean) {
  builder.addFieldInt8(3, +objectNotExists, +false);
}

static addUnknowStruct(builder:flatbuffers.Builder, unknowStruct:boolean) {
  builder.addFieldInt8(4, +unknowStruct, +false);
}

static enddelete_object_resp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createdelete_object_resp(builder:flatbuffers.Builder, status:boolean, incorrectRequest:boolean, internalError:boolean, objectNotExists:boolean, unknowStruct:boolean):flatbuffers.Offset {
  delete_object_resp.startdelete_object_resp(builder);
  delete_object_resp.addStatus(builder, status);
  delete_object_resp.addIncorrectRequest(builder, incorrectRequest);
  delete_object_resp.addInternalError(builder, internalError);
  delete_object_resp.addObjectNotExists(builder, objectNotExists);
  delete_object_resp.addUnknowStruct(builder, unknowStruct);
  return delete_object_resp.enddelete_object_resp(builder);
}

unpack(): delete_object_respT {
  return new delete_object_respT(
    this.status(),
    this.incorrectRequest(),
    this.internalError(),
    this.objectNotExists(),
    this.unknowStruct()
  );
}


unpackTo(_o: delete_object_respT): void {
  _o.status = this.status();
  _o.incorrectRequest = this.incorrectRequest();
  _o.internalError = this.internalError();
  _o.objectNotExists = this.objectNotExists();
  _o.unknowStruct = this.unknowStruct();
}
}

export class delete_object_respT {
constructor(
  public status: boolean = true,
  public incorrectRequest: boolean = false,
  public internalError: boolean = false,
  public objectNotExists: boolean = false,
  public unknowStruct: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return delete_object_resp.createdelete_object_resp(builder,
    this.status,
    this.incorrectRequest,
    this.internalError,
    this.objectNotExists,
    this.unknowStruct
  );
}
}
