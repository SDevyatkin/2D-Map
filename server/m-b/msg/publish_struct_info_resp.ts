// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 *Ответ
 */
export class publish_struct_info_resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):publish_struct_info_resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAspublish_struct_info_resp(bb:flatbuffers.ByteBuffer, obj?:publish_struct_info_resp):publish_struct_info_resp {
  return (obj || new publish_struct_info_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAspublish_struct_info_resp(bb:flatbuffers.ByteBuffer, obj?:publish_struct_info_resp):publish_struct_info_resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new publish_struct_info_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Статус, true если нет ошибок
 */
status():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

/**
 *Некорректный запрос
 */
incorrectRequest():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Внутрення ошибка ПМ Брокер сообщений, дальнейшая работа невозможна
 */
internalError():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Дескриптор структуры (необходим в дальнейшем для информационного обмена)
 */
handlesStruct():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

/**
 *Массив дескрипторов поля структуры, порядковый номер дескриптора в массиве
 * соответсвует порядковому номеру названия поля, указанного в запросе
 */
fieldsHandle(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fieldsHandleLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fieldsHandleArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startpublish_struct_info_resp(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addStatus(builder:flatbuffers.Builder, status:boolean) {
  builder.addFieldInt8(0, +status, +true);
}

static addIncorrectRequest(builder:flatbuffers.Builder, incorrectRequest:boolean) {
  builder.addFieldInt8(1, +incorrectRequest, +false);
}

static addInternalError(builder:flatbuffers.Builder, internalError:boolean) {
  builder.addFieldInt8(2, +internalError, +false);
}

static addHandlesStruct(builder:flatbuffers.Builder, handlesStruct:number) {
  builder.addFieldInt8(3, handlesStruct, 0);
}

static addFieldsHandle(builder:flatbuffers.Builder, fieldsHandleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, fieldsHandleOffset, 0);
}

static createFieldsHandleVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFieldsHandleVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endpublish_struct_info_resp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createpublish_struct_info_resp(builder:flatbuffers.Builder, status:boolean, incorrectRequest:boolean, internalError:boolean, handlesStruct:number, fieldsHandleOffset:flatbuffers.Offset):flatbuffers.Offset {
  publish_struct_info_resp.startpublish_struct_info_resp(builder);
  publish_struct_info_resp.addStatus(builder, status);
  publish_struct_info_resp.addIncorrectRequest(builder, incorrectRequest);
  publish_struct_info_resp.addInternalError(builder, internalError);
  publish_struct_info_resp.addHandlesStruct(builder, handlesStruct);
  publish_struct_info_resp.addFieldsHandle(builder, fieldsHandleOffset);
  return publish_struct_info_resp.endpublish_struct_info_resp(builder);
}

unpack(): publish_struct_info_respT {
  return new publish_struct_info_respT(
    this.status(),
    this.incorrectRequest(),
    this.internalError(),
    this.handlesStruct(),
    this.bb!.createScalarList(this.fieldsHandle.bind(this), this.fieldsHandleLength())
  );
}


unpackTo(_o: publish_struct_info_respT): void {
  _o.status = this.status();
  _o.incorrectRequest = this.incorrectRequest();
  _o.internalError = this.internalError();
  _o.handlesStruct = this.handlesStruct();
  _o.fieldsHandle = this.bb!.createScalarList(this.fieldsHandle.bind(this), this.fieldsHandleLength());
}
}

export class publish_struct_info_respT {
constructor(
  public status: boolean = true,
  public incorrectRequest: boolean = false,
  public internalError: boolean = false,
  public handlesStruct: number = 0,
  public fieldsHandle: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fieldsHandle = publish_struct_info_resp.createFieldsHandleVector(builder, this.fieldsHandle);

  return publish_struct_info_resp.createpublish_struct_info_resp(builder,
    this.status,
    this.incorrectRequest,
    this.internalError,
    this.handlesStruct,
    fieldsHandle
  );
}
}
