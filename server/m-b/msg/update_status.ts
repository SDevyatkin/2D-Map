// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { status_type } from '../../m-b/msg/status_type';


export class update_status {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):update_status {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsupdate_status(bb:flatbuffers.ByteBuffer, obj?:update_status):update_status {
  return (obj || new update_status()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsupdate_status(bb:flatbuffers.ByteBuffer, obj?:update_status):update_status {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new update_status()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Тип статусного сообщения
 */
type():status_type {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : status_type.info;
}

/**
 *Сообщение
 */
msg():string|null
msg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startupdate_status(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:status_type) {
  builder.addFieldInt8(0, type, status_type.info);
}

static addMsg(builder:flatbuffers.Builder, msgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, msgOffset, 0);
}

static endupdate_status(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createupdate_status(builder:flatbuffers.Builder, type:status_type, msgOffset:flatbuffers.Offset):flatbuffers.Offset {
  update_status.startupdate_status(builder);
  update_status.addType(builder, type);
  update_status.addMsg(builder, msgOffset);
  return update_status.endupdate_status(builder);
}

unpack(): update_statusT {
  return new update_statusT(
    this.type(),
    this.msg()
  );
}


unpackTo(_o: update_statusT): void {
  _o.type = this.type();
  _o.msg = this.msg();
}
}

export class update_statusT {
constructor(
  public type: status_type = status_type.info,
  public msg: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const msg = (this.msg !== null ? builder.createString(this.msg!) : 0);

  return update_status.createupdate_status(builder,
    this.type,
    msg
  );
}
}
