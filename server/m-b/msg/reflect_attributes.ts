// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class reflect_attributes {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):reflect_attributes {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsreflect_attributes(bb:flatbuffers.ByteBuffer, obj?:reflect_attributes):reflect_attributes {
  return (obj || new reflect_attributes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsreflect_attributes(bb:flatbuffers.ByteBuffer, obj?:reflect_attributes):reflect_attributes {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new reflect_attributes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Дескриптор структуры экземпляр, которой указан ниже
 */
structHandle():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

/**
 *Дескриптор экземпляра сруктуры
 */
objectHandle():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

/**
 *Логически-временная метка данных
 */
timeStamp():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : -1.0;
}

/**
 *Значения данных структуры
 *Представляют из себя flexbuffer Vector в формате:
 *
 *index: 0   [дескриптор поля 1 структуры (всегда uint8)]
 *index: 1   [значение поля 1 (тип зависит от структуры)]
 *......
 *......
 *index: N   [дескриптор поля N структуры (всегда uint8)]
 *index: N+1 [значение поля N (тип зависит от структуры)]
 */
values(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valuesArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startreflect_attributes(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addStructHandle(builder:flatbuffers.Builder, structHandle:number) {
  builder.addFieldInt8(0, structHandle, 0);
}

static addObjectHandle(builder:flatbuffers.Builder, objectHandle:number) {
  builder.addFieldInt8(1, objectHandle, 0);
}

static addTimeStamp(builder:flatbuffers.Builder, timeStamp:number) {
  builder.addFieldFloat64(2, timeStamp, -1.0);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endreflect_attributes(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createreflect_attributes(builder:flatbuffers.Builder, structHandle:number, objectHandle:number, timeStamp:number, valuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  reflect_attributes.startreflect_attributes(builder);
  reflect_attributes.addStructHandle(builder, structHandle);
  reflect_attributes.addObjectHandle(builder, objectHandle);
  reflect_attributes.addTimeStamp(builder, timeStamp);
  reflect_attributes.addValues(builder, valuesOffset);
  return reflect_attributes.endreflect_attributes(builder);
}

unpack(): reflect_attributesT {
  return new reflect_attributesT(
    this.structHandle(),
    this.objectHandle(),
    this.timeStamp(),
    this.bb!.createScalarList(this.values.bind(this), this.valuesLength())
  );
}


unpackTo(_o: reflect_attributesT): void {
  _o.structHandle = this.structHandle();
  _o.objectHandle = this.objectHandle();
  _o.timeStamp = this.timeStamp();
  _o.values = this.bb!.createScalarList(this.values.bind(this), this.valuesLength());
}
}

export class reflect_attributesT {
constructor(
  public structHandle: number = 0,
  public objectHandle: number = 0,
  public timeStamp: number = -1.0,
  public values: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const values = reflect_attributes.createValuesVector(builder, this.values);

  return reflect_attributes.createreflect_attributes(builder,
    this.structHandle,
    this.objectHandle,
    this.timeStamp,
    values
  );
}
}
