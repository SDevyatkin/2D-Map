// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class next_time {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):next_time {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsnext_time(bb:flatbuffers.ByteBuffer, obj?:next_time):next_time {
  return (obj || new next_time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsnext_time(bb:flatbuffers.ByteBuffer, obj?:next_time):next_time {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new next_time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Логическое время, до которого нужно продвинуться
 *логическое время нужно продвигать с шагом, указанным в структуре choose_sync_mode
 */
newTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startnext_time(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addNewTime(builder:flatbuffers.Builder, newTime:number) {
  builder.addFieldFloat64(0, newTime, 0.0);
}

static endnext_time(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createnext_time(builder:flatbuffers.Builder, newTime:number):flatbuffers.Offset {
  next_time.startnext_time(builder);
  next_time.addNewTime(builder, newTime);
  return next_time.endnext_time(builder);
}

unpack(): next_timeT {
  return new next_timeT(
    this.newTime()
  );
}


unpackTo(_o: next_timeT): void {
  _o.newTime = this.newTime();
}
}

export class next_timeT {
constructor(
  public newTime: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return next_time.createnext_time(builder,
    this.newTime
  );
}
}
