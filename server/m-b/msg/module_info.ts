// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class module_info {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):module_info {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsmodule_info(bb:flatbuffers.ByteBuffer, obj?:module_info):module_info {
  return (obj || new module_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsmodule_info(bb:flatbuffers.ByteBuffer, obj?:module_info):module_info {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new module_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

moduleName():string|null
moduleName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
moduleName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hostIp():string|null
hostIp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostIp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startmodule_info(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addModuleName(builder:flatbuffers.Builder, moduleNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, moduleNameOffset, 0);
}

static addHostIp(builder:flatbuffers.Builder, hostIpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, hostIpOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, versionOffset, 0);
}

static endmodule_info(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createmodule_info(builder:flatbuffers.Builder, moduleNameOffset:flatbuffers.Offset, hostIpOffset:flatbuffers.Offset, versionOffset:flatbuffers.Offset):flatbuffers.Offset {
  module_info.startmodule_info(builder);
  module_info.addModuleName(builder, moduleNameOffset);
  module_info.addHostIp(builder, hostIpOffset);
  module_info.addVersion(builder, versionOffset);
  return module_info.endmodule_info(builder);
}

unpack(): module_infoT {
  return new module_infoT(
    this.moduleName(),
    this.hostIp(),
    this.version()
  );
}


unpackTo(_o: module_infoT): void {
  _o.moduleName = this.moduleName();
  _o.hostIp = this.hostIp();
  _o.version = this.version();
}
}

export class module_infoT {
constructor(
  public moduleName: string|Uint8Array|null = null,
  public hostIp: string|Uint8Array|null = null,
  public version: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const moduleName = (this.moduleName !== null ? builder.createString(this.moduleName!) : 0);
  const hostIp = (this.hostIp !== null ? builder.createString(this.hostIp!) : 0);
  const version = (this.version !== null ? builder.createString(this.version!) : 0);

  return module_info.createmodule_info(builder,
    moduleName,
    hostIp,
    version
  );
}
}
