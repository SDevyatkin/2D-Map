// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { field_info, field_infoT } from '../../m-b/msg/field_info';


export class publish_struct_info {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):publish_struct_info {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAspublish_struct_info(bb:flatbuffers.ByteBuffer, obj?:publish_struct_info):publish_struct_info {
  return (obj || new publish_struct_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAspublish_struct_info(bb:flatbuffers.ByteBuffer, obj?:publish_struct_info):publish_struct_info {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new publish_struct_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Название структуры
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Описание полей структуры
 */
fields(index: number, obj?:field_info):field_info|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new field_info()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startpublish_struct_info(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addFields(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fieldsOffset, 0);
}

static createFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endpublish_struct_info(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createpublish_struct_info(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, fieldsOffset:flatbuffers.Offset):flatbuffers.Offset {
  publish_struct_info.startpublish_struct_info(builder);
  publish_struct_info.addName(builder, nameOffset);
  publish_struct_info.addFields(builder, fieldsOffset);
  return publish_struct_info.endpublish_struct_info(builder);
}

unpack(): publish_struct_infoT {
  return new publish_struct_infoT(
    this.name(),
    this.bb!.createObjList(this.fields.bind(this), this.fieldsLength())
  );
}


unpackTo(_o: publish_struct_infoT): void {
  _o.name = this.name();
  _o.fields = this.bb!.createObjList(this.fields.bind(this), this.fieldsLength());
}
}

export class publish_struct_infoT {
constructor(
  public name: string|Uint8Array|null = null,
  public fields: (field_infoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const fields = publish_struct_info.createFieldsVector(builder, builder.createObjectOffsetList(this.fields));

  return publish_struct_info.createpublish_struct_info(builder,
    name,
    fields
  );
}
}
