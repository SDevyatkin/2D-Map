// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 *Ответ
 */
export class current_logical_time_resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):current_logical_time_resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAscurrent_logical_time_resp(bb:flatbuffers.ByteBuffer, obj?:current_logical_time_resp):current_logical_time_resp {
  return (obj || new current_logical_time_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAscurrent_logical_time_resp(bb:flatbuffers.ByteBuffer, obj?:current_logical_time_resp):current_logical_time_resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new current_logical_time_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Текущее глобальное логическое время
 */
logicalTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startcurrent_logical_time_resp(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLogicalTime(builder:flatbuffers.Builder, logicalTime:number) {
  builder.addFieldFloat64(0, logicalTime, 0.0);
}

static endcurrent_logical_time_resp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createcurrent_logical_time_resp(builder:flatbuffers.Builder, logicalTime:number):flatbuffers.Offset {
  current_logical_time_resp.startcurrent_logical_time_resp(builder);
  current_logical_time_resp.addLogicalTime(builder, logicalTime);
  return current_logical_time_resp.endcurrent_logical_time_resp(builder);
}

unpack(): current_logical_time_respT {
  return new current_logical_time_respT(
    this.logicalTime()
  );
}


unpackTo(_o: current_logical_time_respT): void {
  _o.logicalTime = this.logicalTime();
}
}

export class current_logical_time_respT {
constructor(
  public logicalTime: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return current_logical_time_resp.createcurrent_logical_time_resp(builder,
    this.logicalTime
  );
}
}
