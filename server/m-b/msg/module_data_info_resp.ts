// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { publish_struct_info, publish_struct_infoT } from '../../m-b/msg/publish_struct_info';


/**
 *Ответ
 */
export class module_data_info_resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):module_data_info_resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsmodule_data_info_resp(bb:flatbuffers.ByteBuffer, obj?:module_data_info_resp):module_data_info_resp {
  return (obj || new module_data_info_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsmodule_data_info_resp(bb:flatbuffers.ByteBuffer, obj?:module_data_info_resp):module_data_info_resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new module_data_info_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

publishInfo(index: number, obj?:publish_struct_info):publish_struct_info|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new publish_struct_info()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

publishInfoLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startmodule_data_info_resp(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPublishInfo(builder:flatbuffers.Builder, publishInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, publishInfoOffset, 0);
}

static createPublishInfoVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPublishInfoVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endmodule_data_info_resp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createmodule_data_info_resp(builder:flatbuffers.Builder, publishInfoOffset:flatbuffers.Offset):flatbuffers.Offset {
  module_data_info_resp.startmodule_data_info_resp(builder);
  module_data_info_resp.addPublishInfo(builder, publishInfoOffset);
  return module_data_info_resp.endmodule_data_info_resp(builder);
}

unpack(): module_data_info_respT {
  return new module_data_info_respT(
    this.bb!.createObjList(this.publishInfo.bind(this), this.publishInfoLength())
  );
}


unpackTo(_o: module_data_info_respT): void {
  _o.publishInfo = this.bb!.createObjList(this.publishInfo.bind(this), this.publishInfoLength());
}
}

export class module_data_info_respT {
constructor(
  public publishInfo: (publish_struct_infoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const publishInfo = module_data_info_resp.createPublishInfoVector(builder, builder.createObjectOffsetList(this.publishInfo));

  return module_data_info_resp.createmodule_data_info_resp(builder,
    publishInfo
  );
}
}
