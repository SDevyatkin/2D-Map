// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class subscribe_struct_info {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):subscribe_struct_info {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAssubscribe_struct_info(bb:flatbuffers.ByteBuffer, obj?:subscribe_struct_info):subscribe_struct_info {
  return (obj || new subscribe_struct_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAssubscribe_struct_info(bb:flatbuffers.ByteBuffer, obj?:subscribe_struct_info):subscribe_struct_info {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new subscribe_struct_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Название структуры, данных которой необходимо получать
 */
structName():string|null
structName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
structName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Название экземпляра структуры, данные которого необходимо получать
 */
objectName():string|null
objectName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Поля структуры, данные которых необходимо получать
 */
fields(index: number):string
fields(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
fields(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

fieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startsubscribe_struct_info(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addStructName(builder:flatbuffers.Builder, structNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, structNameOffset, 0);
}

static addObjectName(builder:flatbuffers.Builder, objectNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, objectNameOffset, 0);
}

static addFields(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fieldsOffset, 0);
}

static createFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endsubscribe_struct_info(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createsubscribe_struct_info(builder:flatbuffers.Builder, structNameOffset:flatbuffers.Offset, objectNameOffset:flatbuffers.Offset, fieldsOffset:flatbuffers.Offset):flatbuffers.Offset {
  subscribe_struct_info.startsubscribe_struct_info(builder);
  subscribe_struct_info.addStructName(builder, structNameOffset);
  subscribe_struct_info.addObjectName(builder, objectNameOffset);
  subscribe_struct_info.addFields(builder, fieldsOffset);
  return subscribe_struct_info.endsubscribe_struct_info(builder);
}

unpack(): subscribe_struct_infoT {
  return new subscribe_struct_infoT(
    this.structName(),
    this.objectName(),
    this.bb!.createScalarList(this.fields.bind(this), this.fieldsLength())
  );
}


unpackTo(_o: subscribe_struct_infoT): void {
  _o.structName = this.structName();
  _o.objectName = this.objectName();
  _o.fields = this.bb!.createScalarList(this.fields.bind(this), this.fieldsLength());
}
}

export class subscribe_struct_infoT {
constructor(
  public structName: string|Uint8Array|null = null,
  public objectName: string|Uint8Array|null = null,
  public fields: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const structName = (this.structName !== null ? builder.createString(this.structName!) : 0);
  const objectName = (this.objectName !== null ? builder.createString(this.objectName!) : 0);
  const fields = subscribe_struct_info.createFieldsVector(builder, builder.createObjectOffsetList(this.fields));

  return subscribe_struct_info.createsubscribe_struct_info(builder,
    structName,
    objectName,
    fields
  );
}
}
