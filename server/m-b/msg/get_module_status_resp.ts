// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 *Ответ
 */
export class get_module_status_resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):get_module_status_resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsget_module_status_resp(bb:flatbuffers.ByteBuffer, obj?:get_module_status_resp):get_module_status_resp {
  return (obj || new get_module_status_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsget_module_status_resp(bb:flatbuffers.ByteBuffer, obj?:get_module_status_resp):get_module_status_resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new get_module_status_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *статус, true если нет ошибок
 */
status():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

/**
 * некорректный запрос
 */
incorrectRequest():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *внутрення ошибка ПМ Брокер сообщений, дальнейшая работа невозможна
 */
internalError():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Статусные сообщения у данного ПМ отсутсвуют
 */
statusMessageEmpty():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *ПМ не найден в системе
 */
moduleNotFound():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Название ПМ, которому принадлежат статусные сообщения
 */
moduleName():string|null
moduleName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
moduleName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Статусные сообщения
 */
message(index: number):string
message(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
message(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

messageLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startget_module_status_resp(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addStatus(builder:flatbuffers.Builder, status:boolean) {
  builder.addFieldInt8(0, +status, +true);
}

static addIncorrectRequest(builder:flatbuffers.Builder, incorrectRequest:boolean) {
  builder.addFieldInt8(1, +incorrectRequest, +false);
}

static addInternalError(builder:flatbuffers.Builder, internalError:boolean) {
  builder.addFieldInt8(2, +internalError, +false);
}

static addStatusMessageEmpty(builder:flatbuffers.Builder, statusMessageEmpty:boolean) {
  builder.addFieldInt8(3, +statusMessageEmpty, +false);
}

static addModuleNotFound(builder:flatbuffers.Builder, moduleNotFound:boolean) {
  builder.addFieldInt8(4, +moduleNotFound, +false);
}

static addModuleName(builder:flatbuffers.Builder, moduleNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, moduleNameOffset, 0);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, messageOffset, 0);
}

static createMessageVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessageVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endget_module_status_resp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createget_module_status_resp(builder:flatbuffers.Builder, status:boolean, incorrectRequest:boolean, internalError:boolean, statusMessageEmpty:boolean, moduleNotFound:boolean, moduleNameOffset:flatbuffers.Offset, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  get_module_status_resp.startget_module_status_resp(builder);
  get_module_status_resp.addStatus(builder, status);
  get_module_status_resp.addIncorrectRequest(builder, incorrectRequest);
  get_module_status_resp.addInternalError(builder, internalError);
  get_module_status_resp.addStatusMessageEmpty(builder, statusMessageEmpty);
  get_module_status_resp.addModuleNotFound(builder, moduleNotFound);
  get_module_status_resp.addModuleName(builder, moduleNameOffset);
  get_module_status_resp.addMessage(builder, messageOffset);
  return get_module_status_resp.endget_module_status_resp(builder);
}

unpack(): get_module_status_respT {
  return new get_module_status_respT(
    this.status(),
    this.incorrectRequest(),
    this.internalError(),
    this.statusMessageEmpty(),
    this.moduleNotFound(),
    this.moduleName(),
    this.bb!.createScalarList(this.message.bind(this), this.messageLength())
  );
}


unpackTo(_o: get_module_status_respT): void {
  _o.status = this.status();
  _o.incorrectRequest = this.incorrectRequest();
  _o.internalError = this.internalError();
  _o.statusMessageEmpty = this.statusMessageEmpty();
  _o.moduleNotFound = this.moduleNotFound();
  _o.moduleName = this.moduleName();
  _o.message = this.bb!.createScalarList(this.message.bind(this), this.messageLength());
}
}

export class get_module_status_respT {
constructor(
  public status: boolean = true,
  public incorrectRequest: boolean = false,
  public internalError: boolean = false,
  public statusMessageEmpty: boolean = false,
  public moduleNotFound: boolean = false,
  public moduleName: string|Uint8Array|null = null,
  public message: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const moduleName = (this.moduleName !== null ? builder.createString(this.moduleName!) : 0);
  const message = get_module_status_resp.createMessageVector(builder, builder.createObjectOffsetList(this.message));

  return get_module_status_resp.createget_module_status_resp(builder,
    this.status,
    this.incorrectRequest,
    this.internalError,
    this.statusMessageEmpty,
    this.moduleNotFound,
    moduleName,
    message
  );
}
}
