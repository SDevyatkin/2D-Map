// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { field_type } from '../../m-b/msg/field_type';


export class field_info {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):field_info {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsfield_info(bb:flatbuffers.ByteBuffer, obj?:field_info):field_info {
  return (obj || new field_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsfield_info(bb:flatbuffers.ByteBuffer, obj?:field_info):field_info {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new field_info()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Название поля структуры
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Тип поля структуры
 */
type():field_type {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : field_type.INT;
}

/**
 *Единицы измерения поля структуры
 */
units():string|null
units(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
units(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Количество элементов в поле структуры (в случае если поле структуры это массив)
 */
numberOfElements():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 1;
}

static startfield_info(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:field_type) {
  builder.addFieldInt8(1, type, field_type.INT);
}

static addUnits(builder:flatbuffers.Builder, unitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, unitsOffset, 0);
}

static addNumberOfElements(builder:flatbuffers.Builder, numberOfElements:number) {
  builder.addFieldInt16(3, numberOfElements, 1);
}

static endfield_info(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createfield_info(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, type:field_type, unitsOffset:flatbuffers.Offset, numberOfElements:number):flatbuffers.Offset {
  field_info.startfield_info(builder);
  field_info.addName(builder, nameOffset);
  field_info.addType(builder, type);
  field_info.addUnits(builder, unitsOffset);
  field_info.addNumberOfElements(builder, numberOfElements);
  return field_info.endfield_info(builder);
}

unpack(): field_infoT {
  return new field_infoT(
    this.name(),
    this.type(),
    this.units(),
    this.numberOfElements()
  );
}


unpackTo(_o: field_infoT): void {
  _o.name = this.name();
  _o.type = this.type();
  _o.units = this.units();
  _o.numberOfElements = this.numberOfElements();
}
}

export class field_infoT {
constructor(
  public name: string|Uint8Array|null = null,
  public type: field_type = field_type.INT,
  public units: string|Uint8Array|null = null,
  public numberOfElements: number = 1
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const units = (this.units !== null ? builder.createString(this.units!) : 0);

  return field_info.createfield_info(builder,
    name,
    this.type,
    units,
    this.numberOfElements
  );
}
}
