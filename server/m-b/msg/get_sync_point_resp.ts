// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 *Ответ
 */
export class get_sync_point_resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):get_sync_point_resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsget_sync_point_resp(bb:flatbuffers.ByteBuffer, obj?:get_sync_point_resp):get_sync_point_resp {
  return (obj || new get_sync_point_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsget_sync_point_resp(bb:flatbuffers.ByteBuffer, obj?:get_sync_point_resp):get_sync_point_resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new get_sync_point_resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Имя полученной точки синхронизации
 */
syncPointName():string|null
syncPointName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
syncPointName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Некорректный запрос
 */
incorrectRequest():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *Внутрення ошибка ПМ Брокер сообщений, дальнейшая работа невозможна
 */
internalError():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startget_sync_point_resp(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSyncPointName(builder:flatbuffers.Builder, syncPointNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, syncPointNameOffset, 0);
}

static addIncorrectRequest(builder:flatbuffers.Builder, incorrectRequest:boolean) {
  builder.addFieldInt8(1, +incorrectRequest, +false);
}

static addInternalError(builder:flatbuffers.Builder, internalError:boolean) {
  builder.addFieldInt8(2, +internalError, +false);
}

static endget_sync_point_resp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createget_sync_point_resp(builder:flatbuffers.Builder, syncPointNameOffset:flatbuffers.Offset, incorrectRequest:boolean, internalError:boolean):flatbuffers.Offset {
  get_sync_point_resp.startget_sync_point_resp(builder);
  get_sync_point_resp.addSyncPointName(builder, syncPointNameOffset);
  get_sync_point_resp.addIncorrectRequest(builder, incorrectRequest);
  get_sync_point_resp.addInternalError(builder, internalError);
  return get_sync_point_resp.endget_sync_point_resp(builder);
}

unpack(): get_sync_point_respT {
  return new get_sync_point_respT(
    this.syncPointName(),
    this.incorrectRequest(),
    this.internalError()
  );
}


unpackTo(_o: get_sync_point_respT): void {
  _o.syncPointName = this.syncPointName();
  _o.incorrectRequest = this.incorrectRequest();
  _o.internalError = this.internalError();
}
}

export class get_sync_point_respT {
constructor(
  public syncPointName: string|Uint8Array|null = null,
  public incorrectRequest: boolean = false,
  public internalError: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const syncPointName = (this.syncPointName !== null ? builder.createString(this.syncPointName!) : 0);

  return get_sync_point_resp.createget_sync_point_resp(builder,
    syncPointName,
    this.incorrectRequest,
    this.internalError
  );
}
}
