// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class register_sync_point {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):register_sync_point {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsregister_sync_point(bb:flatbuffers.ByteBuffer, obj?:register_sync_point):register_sync_point {
  return (obj || new register_sync_point()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsregister_sync_point(bb:flatbuffers.ByteBuffer, obj?:register_sync_point):register_sync_point {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new register_sync_point()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Название точки синхронизации (рекомендуется использовать короткое название для большей производительности)
 */
syncPointName():string|null
syncPointName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
syncPointName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Для каких модулей предназначена данная точка синхронизации (можно указывать себя)
 */
forModules(index: number):string
forModules(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
forModules(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

forModulesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startregister_sync_point(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSyncPointName(builder:flatbuffers.Builder, syncPointNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, syncPointNameOffset, 0);
}

static addForModules(builder:flatbuffers.Builder, forModulesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, forModulesOffset, 0);
}

static createForModulesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForModulesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endregister_sync_point(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createregister_sync_point(builder:flatbuffers.Builder, syncPointNameOffset:flatbuffers.Offset, forModulesOffset:flatbuffers.Offset):flatbuffers.Offset {
  register_sync_point.startregister_sync_point(builder);
  register_sync_point.addSyncPointName(builder, syncPointNameOffset);
  register_sync_point.addForModules(builder, forModulesOffset);
  return register_sync_point.endregister_sync_point(builder);
}

unpack(): register_sync_pointT {
  return new register_sync_pointT(
    this.syncPointName(),
    this.bb!.createScalarList(this.forModules.bind(this), this.forModulesLength())
  );
}


unpackTo(_o: register_sync_pointT): void {
  _o.syncPointName = this.syncPointName();
  _o.forModules = this.bb!.createScalarList(this.forModules.bind(this), this.forModulesLength());
}
}

export class register_sync_pointT {
constructor(
  public syncPointName: string|Uint8Array|null = null,
  public forModules: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const syncPointName = (this.syncPointName !== null ? builder.createString(this.syncPointName!) : 0);
  const forModules = register_sync_point.createForModulesVector(builder, builder.createObjectOffsetList(this.forModules));

  return register_sync_point.createregister_sync_point(builder,
    syncPointName,
    forModules
  );
}
}
