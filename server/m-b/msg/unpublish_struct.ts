// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class unpublish_struct {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):unpublish_struct {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsunpublish_struct(bb:flatbuffers.ByteBuffer, obj?:unpublish_struct):unpublish_struct {
  return (obj || new unpublish_struct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsunpublish_struct(bb:flatbuffers.ByteBuffer, obj?:unpublish_struct):unpublish_struct {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new unpublish_struct()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nameStruct():string|null
nameStruct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nameStruct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startunpublish_struct(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addNameStruct(builder:flatbuffers.Builder, nameStructOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameStructOffset, 0);
}

static endunpublish_struct(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createunpublish_struct(builder:flatbuffers.Builder, nameStructOffset:flatbuffers.Offset):flatbuffers.Offset {
  unpublish_struct.startunpublish_struct(builder);
  unpublish_struct.addNameStruct(builder, nameStructOffset);
  return unpublish_struct.endunpublish_struct(builder);
}

unpack(): unpublish_structT {
  return new unpublish_structT(
    this.nameStruct()
  );
}


unpackTo(_o: unpublish_structT): void {
  _o.nameStruct = this.nameStruct();
}
}

export class unpublish_structT {
constructor(
  public nameStruct: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const nameStruct = (this.nameStruct !== null ? builder.createString(this.nameStruct!) : 0);

  return unpublish_struct.createunpublish_struct(builder,
    nameStruct
  );
}
}
