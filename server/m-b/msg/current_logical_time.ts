// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class current_logical_time {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):current_logical_time {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAscurrent_logical_time(bb:flatbuffers.ByteBuffer, obj?:current_logical_time):current_logical_time {
  return (obj || new current_logical_time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAscurrent_logical_time(bb:flatbuffers.ByteBuffer, obj?:current_logical_time):current_logical_time {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new current_logical_time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

reserved():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startcurrent_logical_time(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addReserved(builder:flatbuffers.Builder, reserved:boolean) {
  builder.addFieldInt8(0, +reserved, +false);
}

static endcurrent_logical_time(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createcurrent_logical_time(builder:flatbuffers.Builder, reserved:boolean):flatbuffers.Offset {
  current_logical_time.startcurrent_logical_time(builder);
  current_logical_time.addReserved(builder, reserved);
  return current_logical_time.endcurrent_logical_time(builder);
}

unpack(): current_logical_timeT {
  return new current_logical_timeT(
    this.reserved()
  );
}


unpackTo(_o: current_logical_timeT): void {
  _o.reserved = this.reserved();
}
}

export class current_logical_timeT {
constructor(
  public reserved: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return current_logical_time.createcurrent_logical_time(builder,
    this.reserved
  );
}
}
