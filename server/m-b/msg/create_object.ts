// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class create_object {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):create_object {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAscreate_object(bb:flatbuffers.ByteBuffer, obj?:create_object):create_object {
  return (obj || new create_object()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAscreate_object(bb:flatbuffers.ByteBuffer, obj?:create_object):create_object {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new create_object()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 *Название структуры, экземпляр который нужно создать
 */
nameStruct():string|null
nameStruct(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nameStruct(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 *Название экземпляра структуры
 */
nameObject():string|null
nameObject(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nameObject(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startcreate_object(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addNameStruct(builder:flatbuffers.Builder, nameStructOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameStructOffset, 0);
}

static addNameObject(builder:flatbuffers.Builder, nameObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameObjectOffset, 0);
}

static endcreate_object(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createcreate_object(builder:flatbuffers.Builder, nameStructOffset:flatbuffers.Offset, nameObjectOffset:flatbuffers.Offset):flatbuffers.Offset {
  create_object.startcreate_object(builder);
  create_object.addNameStruct(builder, nameStructOffset);
  create_object.addNameObject(builder, nameObjectOffset);
  return create_object.endcreate_object(builder);
}

unpack(): create_objectT {
  return new create_objectT(
    this.nameStruct(),
    this.nameObject()
  );
}


unpackTo(_o: create_objectT): void {
  _o.nameStruct = this.nameStruct();
  _o.nameObject = this.nameObject();
}
}

export class create_objectT {
constructor(
  public nameStruct: string|Uint8Array|null = null,
  public nameObject: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const nameStruct = (this.nameStruct !== null ? builder.createString(this.nameStruct!) : 0);
  const nameObject = (this.nameObject !== null ? builder.createString(this.nameObject!) : 0);

  return create_object.createcreate_object(builder,
    nameStruct,
    nameObject
  );
}
}
